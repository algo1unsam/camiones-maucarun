import camiones.*

// TODO muy bien los test!!
test "Distintos niveles de peligrosidad de Bumblebee" {
	bumblebee.cambioForma(auto)
	assert.equals(15,bumblebee.peligrosidad())
	bumblebee.cambioForma(robot)
	assert.equals(30,bumblebee.peligrosidad())
}

test "Peso de Paquete de Ladrillos"{
	ladrillos.cantLadrillos(10)
	assert.equals(20,ladrillos.peso())
}

test "Cargar en camion KnightRider, preguntar por el y descargarlo"{
	camion.cargar(knightRider)
	assert.that(camion.cargas().contains(knightRider))
	camion.descargar(knightRider)
	assert.notThat(camion.cargas().contains(knightRider))
}

test "Deposito recibe coleccion y luego llena camion"{
	var cosas=[ladrillos,bumblebee]
	deposito.recibir(cosas)
	assert.that(deposito.cargasDeposito().contains(ladrillos))
	assert.that(deposito.cargasDeposito().contains(bumblebee))
	deposito.llenar(camion)
	assert.that(deposito.cargasDeposito().isEmpty())
	assert.that(camion.cargas().contains(bumblebee))
	assert.that(camion.cargas().contains(ladrillos))
}

test "Carga actual y disponible del camion"{
	camion.cargar(knightRider)
	camion.cargar(ladrillos)
	ladrillos.cantLadrillos(10)
	assert.equals(520,camion.cargaActual())
	assert.equals(480,camion.cargaDisponible())
}

test "Camion no puede cargar knightRider y bumblebee juntos por su limite de 1000 kg"{
	camion.cargar(bumblebee)
	camion.cargar(knightRider)
	assert.notThat(camion.puedeCargar(knightRider))
	assert.equals(800,camion.cargaActual())
}

test "Cosa mas peligrosa que tiene el camion"{
	camion.cargar(bumblebee)
	bumblebee.cambioForma(robot)
	camion.cargar(ladrillos)
	assert.equals(bumblebee,camion.maxPeligrosidad())
}

test "Por su carga, camión no puede circular en ruta cuyo límite de peligrosidad es 10"{
	camion.cargar(bumblebee)
	bumblebee.cambioForma(auto)
	camion.cargar(ladrillos)
	assert.notThat(camion.puedeCircular(10))
}

test "Motoneta solo puede cargar ladrillos por limite de peligrosidad"{
	motoneta.cargar(ladrillos)
	motoneta.cargar(knightRider)
	assert.that(motoneta.cargas().contains(ladrillos))
}

test "Motoneta no puede cargar ladrillos por limite de peso"{
	ladrillos.cantLadrillos(100)
	motoneta.cargar(ladrillos)
	assert.notThat(motoneta.cargas().contains(ladrillos))
}

test "Deposito recibe coleccion y luego llena motoneta"{
	var cosas=[ladrillos]
	deposito.recibir(cosas)
	assert.that(deposito.cargasDeposito().contains(ladrillos))
	deposito.llenar(motoneta)
	assert.that(deposito.cargasDeposito().isEmpty())
	assert.that(motoneta.cargas().contains(ladrillos))
}

test "Chequeo de peso y peligrosidad de contenedor"{
	assert.equals(0,contenedor.peligrosidad())
	contenedor.cargar(knightRider)
	contenedor.cargar(bumblebee)
	assert.equals(1400,contenedor.peso())
	assert.equals(500,contenedor.peligrosidad())
}

test "Chequeo de peso y peligrosidad de embalaje"{
	embalaje.envolver(knightRider)
	assert.equals(500,embalaje.peso())
	assert.equals(250,embalaje.peligrosidad())
}
